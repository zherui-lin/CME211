#include <cmath>
#include <vector>

#include "matvecops.hpp"

/* calculate the result of sum of two vectors */
std::vector<double> AddVec(const std::vector<double> &a, const std:: vector<double> &b) {
    std::vector<double> res;
    for (unsigned int i = 0; i < a.size(); i++) {
        res.push_back(a.at(i) + b.at(i));
    }
    return res;
}

/* calculate the result of scalar multiplication of vector */
std::vector<double> MulScl(double k, const std::vector<double> &v) {
    std::vector<double> res;
    for (auto& val : v) {
        res.push_back(k * val);
    }
    return res;
}

/* calculate the result of matrix multiplication of vector in CSR form */
std::vector<double> MulMatVec(const std::vector<double> &val,
                              const std::vector<int>    &row_ptr,
                              const std::vector<int>    &col_idx,
                              const std::vector<double> &v) {
    std::vector<double> res;
    for (unsigned int i = 0; i < row_ptr.size() - 1; i++) {
        /* calculate the elem generated by the current row and append it to the result */
        double sum = 0.;
        for (int j = row_ptr.at(i); j < row_ptr.at(i + 1); j++) {
            sum += val.at(j) * v.at(col_idx.at(j));
        }
        res.push_back(sum);
    }                      
    return res;    
}

/* calculate the dot product of two vectors */
double MulVec(const std::vector<double> &a, const std::vector<double> &b) {
    double res = 0.;
    for (unsigned int i = 0; i < a.size(); i++) {
        res += a.at(i) * b.at(i);
    }
    return res;
}

/* calculate the norm of vector */
double Norm(const std::vector<double> &v) {
    return sqrt(MulVec(v, v));
}